{"name":"React Keydown","tagline":"Lightweight keydown wrapper for React components","body":"# react-keydown\r\n> Lightweight keydown wrapper for React components.\r\n\r\nUse react-keydown as a higher-order component or decorator to pass keydown\r\nevents to the wrapped component, or call methods directly via designated keys. Good \r\nfor implementing keyboard navigation or other shortcuts.\r\n\r\nKey advantages:\r\n\r\n* **Declarative syntax**: Components say what keys they will respond to.\r\n* **Intuitive DX**: Decorate a class or method to bind it to specified keys\r\n* **Component scoping**: Key bindings respond only when component mounts and/or\r\n  the user appears to be active there\r\n* **Tiny**: 2kb compressed and gzipped (with UMD module wrapping -- smaller\r\n  without it)\r\n\r\n## Install\r\n\r\n```\r\nnpm install --save react-keydown\r\n```\r\n\r\n## Use\r\n\r\n### For methods: Decorate with keys that should trigger method\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport keydown, { Keys } from 'react-keydown';\r\n\r\nconst { ENTER } = Keys;\r\n\r\nclass MyComponent extends React.Component {\r\n\r\n  ...\r\n\r\n  @keydown( ENTER ) // or specify `which` code directly, in this case 13\r\n  submit() {\r\n    MyApi.post( this.state );\r\n  }\r\n}\r\n```\r\n\r\nNote: The keydown event will be passed to the decorated method for further\r\nprocessing, if desired. For example, you may went to `event.preventDefault()`.\r\n\r\n#### Specify multiple keys that should trigger the method\r\n\r\n```javascript\r\n@keydown( ENTER, TAB )\r\nautocomplete() {\r\n  MyApi.get( this.state );\r\n}\r\n```\r\n\r\n### For classes: Pass keydown events into your component\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport keydown from 'react-keydown';\r\n\r\nclass MyComponent extends React.Component {\r\n\r\n  constructor( props ) {\r\n    super( props );\r\n  }\r\n\r\n  componentWillReceiveProps( { keydown } ) {\r\n    if ( keydown.event ) {\r\n      // do something with the keydown event\r\n      console.log( keydown.event.which );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>keydown events will only get passed down after this DOM node mounts or is clicked on</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default keydown( MyComponent );\r\n```\r\n\r\n#### Use ES7/2016 decorator pattern via Babel (stage 1):\r\n\r\n```javascript\r\n@keydown\r\nclass MyComponent extends React.Component {\r\n  ...\r\n}\r\n\r\nexport default MyComponent;\r\n```\r\n\r\n#### Monitor only key codes `which` you care about:\r\n\r\n```javascript\r\nconst KEYS = [\r\n  38, // up\r\n  40, // down\r\n  13  // enter\r\n];\r\n\r\n@keydown( KEYS )\r\nclass MyComponent extends React.Component {\r\n  ...\r\n}\r\n```\r\nOr no need for an array:\r\n```javascript\r\n@keydown( 13 ) // just the enter key\r\n```\r\n\r\n## Demo\r\n\r\n```\r\n$ open example/public/index.html\r\n```\r\n\r\nNote that this is very much a work in progress!\r\n\r\n## Notes and disclaimers\r\n\r\n* The decorator pattern `@keydown` currently requires transpilation by\r\n  [Babel](babeljs.io/) (set to\r\n  stage 1) or the equivalent\r\n* Since the only context we have for keydown events is the component, decorated\r\n  methods receive the event as their sole argument and the component instance as\r\n  context.\r\n* This lib has only been tested using ES2015 classes. Some method decoration\r\n  functionality may work on other types of object methods.\r\n* The method decorators wrap React lifecycle methods in order to work\r\n  as seamlessly and efficiently as possible. The class decorator does not do\r\n  this, functioning instead as a higher-order component.\r\n\r\n## Questions\r\n\r\nWhy is this so limited, only working on `keydown` and such?\r\n\r\n> I published this out of my particular need on a project. If anyone else ever\r\narrives here and needs something else let me know via issues or a pull request.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}